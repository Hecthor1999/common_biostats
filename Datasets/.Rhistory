b[length(b)-8,length(b)]
b[length(b)-8:length(b)]
x <- length(b)
y <- length(b)-8
b[y:x]
vn <- c(1,2,3)
if(any(is.na(vn))){
print("WARNING: has NA")
}
vn <- c(1,2,3,NA)
if(any(is.na(vn))){
print("WARNING: has NA")
}
vn <- c(1,2,3,NA,NA)
if(any(is.na(vn))){
print("WARNING: has NA")
}
dataset <- data.frame(begin=c(1:10),end=c(12,4,5,623,235,2,3,4,6,7))
dataset
dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),]
dataset <- data.frame(begin=c(-10:10,length.out=10),end=c(12,4,-5,623,235,2,-3,4,6,7))
dataset
dataset[,]
dataset <- data.frame(begin=c(-10:10,length.out=10),end=c(12,4,-5,623,235,2,-3,4,6,7))
dataset
dataset <- data.frame(begin=seq(-10,10,length.out=10),end=c(12,4,-5,623,235,2,-3,4,6,7))
dataset
dataset[,]
dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),]
nrow(dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),])
nrow(dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),])
pnorm(1) - pnorm(-1)
pnorm(1,0,1) - pnorm(-1,0,1)
b
c <- seq(-10,10)
c
c[c>0] <- c[c>0]*2
c
U <- matrix(rep(seq(1,10),each=2),nrow=2,ncol=10,byrow=TRUE)
U
U <- matrix(rep(c(1,2),each=10),nrow=2,ncol=10,byrow=TRUE)
U
z <- c(0,1,1.5,1.6,2,3)
index <- which(z>=1 & z<=2)
index
val <- seq(0,1,length.out=500)
res <- dbeta(val,0.8,1.03)
plot(val,res,type="l")
val
tags <- paste(rep(LETTERS,each=2),c(1,2),sep=":")
tags
lizard <- list(1:10,1:10,1:10)
a <- numeric(length(lizard))
for(k in seq_along(lizard)){
a[k] <- sum(lizard[[k]])
}
a
B <- matrix(1:4,nrow=2,ncol=2)
B
B[max(B)]
sort(B)
sort(B)[length(B)-1]
B <- matrix(1:4,nrow=2,ncol=2)
B
sort(B)[length(B)-1]
B <- matrix(1:4,nrow=2,ncol=2,byrow=TRUE)
B
sort(B)[length(B)-1]
myVar <- c(1,2,3,4,5)
log(myVar,base=2)
a <- seq(0,20,length.out=100)
a
names <- c("turur","ewjofv")
for (i in 1:length(names)){
out <- write.table(names,file=names[i].txt,append=TRUE)
for (i in 1:length(names)){
out <- paste0(names[i],".txt")
}
out
out <- c()
for (i in 1:length(names)){
out <- c(out,paste0(names[i],".txt"))
}
out
theList <- list(1,2,3,4,5,6,7,8,list(1:10,1:10,1:10,1:10,1:10,-10:1,1:10))
theList[[c(9,6,2)]]
begin <- c(TRUE,FALSE,TRUE,FALSE,FALSE)
end <- c(TRUE,FALSE,FALSE,TRUE,TRUE)
both <- begin==end
both
a <- c("hoasldd","wohdfd","Vesta")
if(a %in% c("Vesta")){
print(TRUE)
}else{print(FALSE)}
a <- c("hoasldd","wohdfd","Vesta")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
print(TRUE)
break
}else{print(FALSE)}
}
a <- c("hoasldd","wohdfd","Vesta")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
print(TRUE)
break
}
print(FALSE)
}
a <- c("hoasldd","wohdfd","Vesta")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
x
a <- c("hoasldd","wohdfd","Vest")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
x
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
print(x)
a <- c("hoasldd","wohdfd","Vesta")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
print(x)
a <- c("hoasldd","wohdfd","Vesta","efgwrh")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
print(x)
a <- c("hoasldd","wohdfd","Vesa","efgwrh")
for (i in 1:length(a)){
if(a[i]=="Vesta"){
x <- TRUE
break
}
x <- FALSE
}
print(x)
input <- data.frame("Bern"=c(1,2,3,4),"Geneva"=c(3,4,5,1))
input <- cbind(input,num=c(1:nrow(input)))
inpput
input
input <- cbind(input,num=c(1:nrow(input)))
input
A
A[-3,-4]
B <- A[-3,-4]
B
B <- matrix(1:4,nrow=2)
B
C <- matrix(NA,nrow=nrow(B),ncol=nrow(B))
C
for (i in 1:ncol(B)){
C[,i] <- rev(B[,i])
}
C
b <- seq(1:100)
b[length(b)-8:length(b)]
x <- length(b)
y <- length(b)-8
b[y:x]
vn <- c(1,2,3,NA,NA)
if(any(is.na(vn))){
print("WARNING: has NA")
}
vn <- c(1,2,3,NA)
if(any(is.na(vn))){
print("WARNING: has NA")
}
if(any(is.na(vn))){
print("WARNING: has NA")
}
vn <- c(1,2,3)
if(any(is.na(vn))){
print("WARNING: has NA")
}
if(any(is.na(vn))){
print("WARNING: has NA")
}
dataset <- data.frame(begin=seq(-10,10,length.out=10),end=c(12,4,-5,623,235,2,-3,4,6,7))
dataset
dataset[,]
nrow(dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),])
dataset[which(dataset$begin>=dataset$end & dataset$begin>0 & dataset$end>0),]
#21
db <- data.frame(a=c(1,43,3,2,5,4),b=c(4,5,6,7,65,32))
vn <- db[order(db$b,descending=TRUE),c("a")]
#21
db <- data.frame(a=c(1,43,3,2,5,4),b=c(4,5,6,7,65,32))
vn <- db[order(db$b,descending=TRUE),c("a")]
vn
vn <- db[order(db$b,descending=TRUE),]
vn <- order(db$b,descending=TRUE)
order(db$b,descending=TRUE)
order(db$b)
vn <- db[order(db$b,decreasing=TRUE),c("a")]
vn
order(db$b,decreasing =TRUE)
db
vn <- db[order(db$b,decreasing=TRUE),c("a")]
vn
U <- matrix(rep(c(1,2),each=10),nrow=2,ncol=10,byrow=TRUE)
U
index <- which(z>1 & z<2)
index
Z
Z
z
index <- which(z>1 & z<2)
index
lizard <- list(1:10,1:10,1:10)
a <- numeric(length(lizard))
for(k in seq_along(lizard)){
a[k] <- sum(lizard[[k]])
}
a
tags <- paste(rep(LETTERS,each=2),c(1,2),sep=":")
tags
g <- function(r){
return(pi*r^2)
}
g(2)
2*pi^2
pi*2^2
pi
func <- function(a,b){
return(a*b)
}
func(3,3)
func <- function(variable){
if(variable<5.1 & variable>25.5){
stop("Outside range")
}
return(variable^2)
}
func(3)
func <- function(variable){
if(variable<5.1 & variable>25.5){
stop("Outside range")
}
return(variable^2)
}
func(3)
func <- function(variable){
if(variable<5.1 | variable>25.5){
stop("Outside range")
}
return(variable^2)
}
func(3)
do <- function(b){
if(b%%2==0){
return("even")
} else if(b%%2!=0){
return("odd")
}
}
do <- function(b){
if(b%%2==0){
return("even")
} else if(b%%2!=0){
return("odd")
}
}
do(3)
d(4)
do(4)
func <- function(a){
if(a%%2==0){return("even")}
else if(a%%2!=0){return("odd")
}
}
func(2)
func(3)
bite <- function(x,...){
UseMethod("bite",x)
}
species.duck <- function(x){
return("I am a duck.")
}
species.default <- function(x){
return("I am an animal.")
}
name.duck <- function(x){
return("My species name is duck.")
}
name.dagobert <- function(x){
return("They call me dagobert.")
}
vn <- list()
class(vn) <- c("duck","dagobert")
name(vn)
name <- function(x){
UseMethod("name",x)
}
species.duck <- function(x){
return("I am a duck.")
}
species.default <- function(x){
return("I am an animal.")
}
name.duck <- function(x){
return("My species name is duck.")
}
name.dagobert <- function(x){
return("They call me dagobert.")
}
vn <- list()
class(vn) <- c("duck","dagobert")
name(vn)
vn <- list()
class(vn) <- c("dagobert","duck")
name(vn)
species <- function(x){
UseMethod("species",x)
}
species.duck <- function(x){
return("I am a duck.")
}
species.default <- function(x){
return("I am an animal.")
}
name.duck <- function(x){
return("My species name is duck.")
}
name.dagobert <- function(x){
return("They call me dagobert.")
}
vn <- list()
class(vn) <- c("dagobert","duck")
name(vn)
species(vn)
precipitation <- function(x){
l <- list(month = 1:12, precipitation = x)
class(l) <- "precipitation"
return(l)
}
plot.precipitation <- function(obj,...){
plot(obj$month,obj$precipitation,type="l",...)
}
precipit <- precipitation(32)
precipit <- precipitation(c(seq(20,100,length.out=12)))
precipit
plot.precipitation(precipit)
g <- function(a,b){
return(0.5*a*b)
}
g(3,4)
f <- function(a,b){
return(a*b)
}
f(8, 10) == f(80)
f <- function(a,b){
return(a*b)
}
f(8, 10) == f(80)
f <- function(a,b=1){
return(a*b)
}
f(8, 10) == f(80)
f(8,10)
f(80)
func <- function(y){
if(y<3.9 | y>29.1){
stop("Outside range!")
}
return(y^2)
}
func(2)
func(4)
func(4)
#7
do <- function(a){
num <- sum(is.na(a))
sigma2 <- var(a, na.rm = TRUE)
return(list(na=num,var=sigma2))}
do(c(1,2,3,NA,NA))
a <- c(1,2,3,NA,NA))
a <- c(1,2,3,NA,NA)
res <- do(a)
print(paste("a contains", res$na, "NAs"))
print(paste("The variance of a is", res$var))
V <- matrix(1:12,nrow=3)
V
do <- function(x){
res <- sort(x)[length(x)-1]
return(res)
}
do(V)
apply(V,2,do)
M <- V
f <- function(x){
return(sum(log(x)))
}
vn <- numeric(ncol(M))
for (i in 1:ncol(M)){
vn[i] <- f(M[,i])
}
f <- function(x){
return(sum(log(x)))
}
vn <- numeric(ncol(M))
for (i in 1:ncol(M)){
vn[i] <- f(M[,i])
}
vn
x <- apply(log(vn),2,sum)
M <- V
x <- apply(log(M),2,sum)
x
func <- function(x) {
return((min(x) + max(x)) / 2)
}
variable <-sapply(vn,func)
vn <- list(1:10,1:10,1:10)
func <- function(x) {
return((min(x) + max(x)) / 2)
}
variable <-sapply(vn,func)
variable
func <- function(V){
maxes <- apply(V, 2, max)
for(i in 1:ncol(V)){
V[,i] <- V[,i] / maxes[i]
}
return(V)
}
V
func(V)
g <- function(V){
maxes <- apply(V,2,max)
V <- sweep(V,2,maxes,FUN="/")
return(V)}
V
g(V)
do <- function(x, stats){
s <- numeric(length(stats))
for (i in 1:length(stats)){
s[i] <- sapply(x,stats[i])
}
return(s)
}
do(c(1,2,3,4),c("mean","sd"))
do <- function(x, stats){
s <- numeric(length(stats))
for (i in 1:length(stats)){
s[i] <- sapply(x,stats[i])
}
return(s)
}
do(c(1,2,3,4),c("mean","sd"))
myVar <- numeric(nrow(V))
for (i in 1:nrow(V)){
myVar[i] <- sum(V[i,]^2)
}
myVar
z <- apply(V, 1, FUN =function(x)sum(x^2))
z
plotCanvas <- function(xlim=c(0,1),ylim=c(0,1)){
plot(NA,type="n",xlim=xlim,ylim=ylim,xaxt="n",yaxt="n")
}
plotCanvas
plotCanvas()
plotCanvas <- function(xlim=c(0,1),ylim=c(0,1)){
plot(NA,type="n",xlim=xlim,ylim=ylim,xaxt="n",yaxt="n",xlab="",ylab="")
}
plotCanvas()
plotCanvas(c(2,3))
plotCanvas(c(2,3))
plotCanvas(xlim=c(2,3))
plotCanvas(ylim=c(2,3))
plotCanvas(xlim=c(0,35),ylim=c(2,3))
plot(NA,type="n",xlim=c(0,35),ylim=ylim,xaxt="n",yaxt="n",xlab="",ylab="")
plot(NA,type="n",xlim=c(0,35),ylim=c(0,1),xaxt="n",yaxt="n",xlab="",ylab="")
setwd(C:/Users/hecto/OneDrive/Escritorio/Master Bioinformatics/2ยบ semester/biostatistics 2/Datasets)
setwd("C:/Users/hecto/OneDrive/Escritorio/Master Bioinformatics/2ยบ semester/biostatistics 2/Datasets")
getwd()
airPol <- read.csv("airpollution",header=TRUE)
setwd("C:/Users/hecto/OneDrive/Escritorio/Master Bioinformatics/2ยบ semester/biostatistics 2/Datasets/Datasets")
airPol <- read.csv("airpollution",header=TRUE)
airPol <- read.csv("airpollution.csv",header=TRUE)
airpol
airPol
head(airPol)
lm(airPol$Mortality ~ .)
lm(Mortality ~ .,data=airPol)
total_lm <- lm(Mortality ~ .,data=airPol)
plot(airPol$Mortality,total_lm)
